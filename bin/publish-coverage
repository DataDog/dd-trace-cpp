#!/bin/sh

# Publish an already-generated coverage report from dd-trace-cpp to
# dd-trace-cpp-coverage.
#
# Overall, here's what we're going to do:
#
# Clone as little of the dd-trace-cpp-coverage repository as we can manage.
# Then, move the rendered coverage report from dd-trace-cpp into a specially
# named location in dd-trace-cpp-coverage.  Commit and push.

set -x
set -e

tracer_dir=$(pwd)
temp_dir=$(mktemp -d)

echo "Using temporary directory: $temp_dir"
cd "$temp_dir"

# Clone directory structure of the most recent commit of one
# branch (gh-pages).  Don't fetch any regular files.
mkdir dd-trace-cpp-coverage
cd dd-trace-cpp-coverage

git init

git config user.email "damien.mehala@datadoghq.com"
git config user.name "Damien Mehala (via script)"

git remote add origin 'git@github.com:DataDog/dd-trace-cpp-coverage.git'
branch=gh-pages
git fetch --depth=1 --filter=blob:none origin "$branch"

# "Sparse checkout" some subdirectory of the repo root.
# The leaves above and below that directory will be fetched,
# but its sibling directories will not.
git sparse-checkout set dummy/
git checkout "$branch"

hex_encode() {
  string=$1
  while [ -n "$string" ]; do
    tail=${string#?}
    head=${string%"$tail"}
    printf '%02x' "'$head"
    string=$tail
  done
  printf '\n'
}

cd "$tracer_dir"

# Summary information about the coverage report is encoded in the directory name
# that contains the report.
#
# It's a bit silly, but it has a couple of advantages:
#
# - Concurrent commits are trivial to merge, since they involve git trees only.
# - The UI (browser) script that tabulates the summary information need not
#  fetch any actual files: the directory listing is sufficient.

commit_time_iso=$(git show -s --format=%cI)
commit_hash_short=$(git rev-parse HEAD | head -c 7)
commit_branch=$(git branch --show-current)
branch_encoded=$(hex_encode "$commit_branch")
commit_time_iso=$(date "--date=$commit_time_iso" --iso-8601=ns --utc | \
        sed -e 's/,/./g' -e 's/......+00:00$/Z/')
coverage_lines=$(grep -A 3 Lines .coverage/report/index.html | \
        sed -n 's/.*>\([0-9.]\+\).*/\1/p' | \
        paste -s | \
        awk '{print "lines:"$1":"$2":"$3}')
coverage_funcs=$(grep -A 3 Functions .coverage/report/index.html | \
        sed -n 's/.*>\([0-9.]\+\).*/\1/p' | \
        paste -s | \
        awk '{print "funcs:"$1":"$2":"$3}')
report_name=$(printf '%s-%s-%s-%s-%s\n' \
        "$commit_time_iso" \
        "$commit_hash_short" \
        "$coverage_lines" \
        "$coverage_funcs" \
        "$branch_encoded")

mv .coverage/report "$temp_dir/dd-trace-cpp-coverage/$report_name"

cd "$temp_dir/dd-trace-cpp-coverage"
git add -A --sparse
git commit -m "coverage for commit $commit_hash_short on $commit_branch"
git push
